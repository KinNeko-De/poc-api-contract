// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: kinnekode/apicontract/document/grpc/v1/document_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentServiceClient interface {
	StartUpload(ctx context.Context, opts ...grpc.CallOption) (DocumentService_StartUploadClient, error)
	StartDownload(ctx context.Context, in *StartDownloadRequest, opts ...grpc.CallOption) (DocumentService_StartDownloadClient, error)
	ResumeUpload(ctx context.Context, opts ...grpc.CallOption) (DocumentService_ResumeUploadClient, error)
	ResumeDownload(ctx context.Context, in *ResumeDownloadRequest, opts ...grpc.CallOption) (DocumentService_ResumeDownloadClient, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) StartUpload(ctx context.Context, opts ...grpc.CallOption) (DocumentService_StartUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentService_ServiceDesc.Streams[0], "/kinnekode.apicontract.document.grpc.v1.DocumentService/StartUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceStartUploadClient{stream}
	return x, nil
}

type DocumentService_StartUploadClient interface {
	Send(*StartUploadRequest) error
	CloseAndRecv() (*StartUploadResponse, error)
	grpc.ClientStream
}

type documentServiceStartUploadClient struct {
	grpc.ClientStream
}

func (x *documentServiceStartUploadClient) Send(m *StartUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *documentServiceStartUploadClient) CloseAndRecv() (*StartUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentServiceClient) StartDownload(ctx context.Context, in *StartDownloadRequest, opts ...grpc.CallOption) (DocumentService_StartDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentService_ServiceDesc.Streams[1], "/kinnekode.apicontract.document.grpc.v1.DocumentService/StartDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceStartDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocumentService_StartDownloadClient interface {
	Recv() (*StartDownloadResponse, error)
	grpc.ClientStream
}

type documentServiceStartDownloadClient struct {
	grpc.ClientStream
}

func (x *documentServiceStartDownloadClient) Recv() (*StartDownloadResponse, error) {
	m := new(StartDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentServiceClient) ResumeUpload(ctx context.Context, opts ...grpc.CallOption) (DocumentService_ResumeUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentService_ServiceDesc.Streams[2], "/kinnekode.apicontract.document.grpc.v1.DocumentService/ResumeUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceResumeUploadClient{stream}
	return x, nil
}

type DocumentService_ResumeUploadClient interface {
	Send(*ResumeUploadRequest) error
	CloseAndRecv() (*ResumeUploadResponse, error)
	grpc.ClientStream
}

type documentServiceResumeUploadClient struct {
	grpc.ClientStream
}

func (x *documentServiceResumeUploadClient) Send(m *ResumeUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *documentServiceResumeUploadClient) CloseAndRecv() (*ResumeUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResumeUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentServiceClient) ResumeDownload(ctx context.Context, in *ResumeDownloadRequest, opts ...grpc.CallOption) (DocumentService_ResumeDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentService_ServiceDesc.Streams[3], "/kinnekode.apicontract.document.grpc.v1.DocumentService/ResumeDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceResumeDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocumentService_ResumeDownloadClient interface {
	Recv() (*ResumeDownloadResponse, error)
	grpc.ClientStream
}

type documentServiceResumeDownloadClient struct {
	grpc.ClientStream
}

func (x *documentServiceResumeDownloadClient) Recv() (*ResumeDownloadResponse, error) {
	m := new(ResumeDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility
type DocumentServiceServer interface {
	StartUpload(DocumentService_StartUploadServer) error
	StartDownload(*StartDownloadRequest, DocumentService_StartDownloadServer) error
	ResumeUpload(DocumentService_ResumeUploadServer) error
	ResumeDownload(*ResumeDownloadRequest, DocumentService_ResumeDownloadServer) error
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (UnimplementedDocumentServiceServer) StartUpload(DocumentService_StartUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method StartUpload not implemented")
}
func (UnimplementedDocumentServiceServer) StartDownload(*StartDownloadRequest, DocumentService_StartDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method StartDownload not implemented")
}
func (UnimplementedDocumentServiceServer) ResumeUpload(DocumentService_ResumeUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method ResumeUpload not implemented")
}
func (UnimplementedDocumentServiceServer) ResumeDownload(*ResumeDownloadRequest, DocumentService_ResumeDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method ResumeDownload not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_StartUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentServiceServer).StartUpload(&documentServiceStartUploadServer{stream})
}

type DocumentService_StartUploadServer interface {
	SendAndClose(*StartUploadResponse) error
	Recv() (*StartUploadRequest, error)
	grpc.ServerStream
}

type documentServiceStartUploadServer struct {
	grpc.ServerStream
}

func (x *documentServiceStartUploadServer) SendAndClose(m *StartUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *documentServiceStartUploadServer) Recv() (*StartUploadRequest, error) {
	m := new(StartUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DocumentService_StartDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentServiceServer).StartDownload(m, &documentServiceStartDownloadServer{stream})
}

type DocumentService_StartDownloadServer interface {
	Send(*StartDownloadResponse) error
	grpc.ServerStream
}

type documentServiceStartDownloadServer struct {
	grpc.ServerStream
}

func (x *documentServiceStartDownloadServer) Send(m *StartDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DocumentService_ResumeUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentServiceServer).ResumeUpload(&documentServiceResumeUploadServer{stream})
}

type DocumentService_ResumeUploadServer interface {
	SendAndClose(*ResumeUploadResponse) error
	Recv() (*ResumeUploadRequest, error)
	grpc.ServerStream
}

type documentServiceResumeUploadServer struct {
	grpc.ServerStream
}

func (x *documentServiceResumeUploadServer) SendAndClose(m *ResumeUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *documentServiceResumeUploadServer) Recv() (*ResumeUploadRequest, error) {
	m := new(ResumeUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DocumentService_ResumeDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResumeDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentServiceServer).ResumeDownload(m, &documentServiceResumeDownloadServer{stream})
}

type DocumentService_ResumeDownloadServer interface {
	Send(*ResumeDownloadResponse) error
	grpc.ServerStream
}

type documentServiceResumeDownloadServer struct {
	grpc.ServerStream
}

func (x *documentServiceResumeDownloadServer) Send(m *ResumeDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kinnekode.apicontract.document.grpc.v1.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartUpload",
			Handler:       _DocumentService_StartUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StartDownload",
			Handler:       _DocumentService_StartDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResumeUpload",
			Handler:       _DocumentService_ResumeUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ResumeDownload",
			Handler:       _DocumentService_ResumeDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kinnekode/apicontract/document/grpc/v1/document_service.proto",
}
